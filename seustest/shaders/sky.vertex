// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.

// To use centroid sampling we need to have version 300 es shaders, which requires changing:
// attribute to in
// varying to out when in vertex shaders or in when in fragment shaders
// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
// texture2D to texture
#if __VERSION__ >= 300
#define attribute in
#define varying out

#else

#endif

uniform MAT4 WORLD;
uniform MAT4 WORLDVIEWPROJ;
uniform vec4 FOG_COLOR;
uniform vec2 FOG_CONTROL;
uniform vec4 CURRENT_COLOR;
uniform float RENDER_DISTANCE;

attribute highp vec4 POSITION;
attribute vec4 COLOR;

varying vec3 staticPos;
varying vec4 worldPos;
varying vec4 cloudColorMap;
varying vec4 color;
varying float nbc;

const float fogNear = 0.3;

void main()
{
POS4 worldPosed = WORLD * POSITION;
gl_Position = WORLDVIEWPROJ * POSITION;

vec4 sky = CURRENT_COLOR;
vec4 cloud = CURRENT_COLOR;
vec4 fog = FOG_COLOR;
vec4 c = COLOR;

worldPos = worldPosed;
staticPos = POSITION.xyz;
nbc = COLOR.r;

vec3 skyDay = vec3(0.5,0.5,0.55);
vec3 cloudDay = vec3(5.0,3.0,1.0);
vec3 skyNight = vec3(0.6,0.73,1.0)*0.075;
vec3 cloudNight = vec3(0.6,0.73,1.0)*1.0;

sky.rgb = max(sky.rgb*skyDay,skyNight);
cloud.rgb = max(cloud.rgb*cloudDay, cloudNight);
fog.rgb = max(fog.rgb * 3.0, vec3(0.6,0.73,1.0)*0.25);

color = mix(sky, fog, c.r);
cloudColorMap = mix(cloud, fog, c.r);
}