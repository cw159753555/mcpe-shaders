// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.

// To use centroid sampling we need to have version 300 es shaders, which requires changing:
// attribute to in
// varying to out when in vertex shaders or in when in fragment shaders
// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
// texture2D to texture
#if __VERSION__ >= 300
	// version 300 code
	#define varying in
	#define texture2D texture
	out vec4 FragColor;
	#define gl_FragColor FragColor

	#ifdef MSAA_FRAMEBUFFER_ENABLED
		#define _centroid centroid
	#else
		#define _centroid
	#endif

	#ifndef NO_TEXTURE
		_centroid in vec2 uv;
	#endif
#else
	// version 100 code
	#ifndef NO_TEXTURE
		#if defined(TEXEL_AA) && defined(TEXEL_AA_FEATURE)
			varying highp vec2 uv;
		#else
			varying vec2 uv;
		#endif
	#endif
#endif

#include "shaders/util.h"

uniform sampler2D TEXTURE_0;
uniform sampler2D TEXTURE_1;
uniform vec4 FOG_COLOR;
uniform vec2 FOG_CONTROL;

#ifdef USE_MULTITEXTURE
	uniform sampler2D TEXTURE_2;
#endif

varying vec4 light;
varying POS3 posE;
varying vec4 fogColor;
varying vec3 screen_pos;
varying float wavs_b;

#ifdef USE_OVERLAY
	varying vec4 overlayColor;
#endif

#if defined(USE_COLOR_MASK) || defined(ITEM_IN_HAND) || defined(COLOR_SECOND_TEXTURE)
	varying vec4 changeColor;
#endif

#ifdef GLINT
	varying vec2 layer1UV;
	varying vec2 layer2UV;
	varying vec4 tileLightColor;
	varying vec4 glintColor;
#endif

vec4 glintBlend(vec4 dest, vec4 source) {
	// glBlendFuncSeparate(GL_SRC_COLOR, GL_ONE, GL_ONE, GL_ZERO)
	return vec4(source.rgb * source.rgb, source.a) + vec4(dest.rgb, 0.0);
}

#ifdef USE_EMISSIVE
#define NEEDS_DISCARD(C)	(C.a + C.r + C.g + C.b == 0.0)
#else
#ifndef USE_COLOR_MASK
#define NEEDS_DISCARD(C)	(C.a < 0.5)
#else
#define NEEDS_DISCARD(C)	(C.a <= 0.0)
#endif
#endif

void main()
{
	vec4 color = vec4(1.0);
	
	 float center_dist = min(1.5, length(screen_pos.xy*0.6));
  float edge_effect = max(0.0, (center_dist - 0.3) * 3.7);
	
	vec4 ab =FOG_COLOR;
	vec4 un_water_color =vec4(0.3,0.7,1.5,1.0);
	vec3 foglight_color =vec3(ab.r,ab.g*0.8,ab.b*0.5)*0.5;
vec3 sunlight_color = vec3(1.18,1.2,1.2)*0.7*min(FOG_CONTROL.y,1.0)+foglight_color;
vec3 shadow_color = vec3(0.45,0.54,0.75)*0.8*min(FOG_CONTROL.y,1.0);
float rain_hl_s =0.5;
float rain_hl = (1.0-min(FOG_CONTROL.y,1.0))*rain_hl_s;
	float items_flag = 0.0;
float far_f = min(screen_pos.z*4.0,1.0)-0.1;


#ifndef NO_TEXTURE
#if !defined(TEXEL_AA) || !defined(TEXEL_AA_FEATURE)
	color = texture2D( TEXTURE_0, uv );
#else
	color = texture2D_AA(TEXTURE_0, uv);
#endif

	#ifdef ALPHA_TEST
		if(NEEDS_DISCARD(color))
			discard;
	#endif
#endif

#ifdef USE_COLOR_MASK
	color.rgb = mix(color.rgb, color.rgb*changeColor.rgb, color.a);
	color.a = 1.0;
#endif

#ifdef ITEM_IN_HAND
items_flag =1.0;
	color.rgb = mix(color.rgb, color.rgb*changeColor.rgb, light.a);
#endif

#ifdef USE_MULTITEXTURE
	vec4 tex1 = texture2D( TEXTURE_1, uv );
	vec4 tex2 = texture2D( TEXTURE_2, uv );
	color.rgb = mix(color.rgb, tex1.rgb, tex1.a);
#ifdef COLOR_SECOND_TEXTURE
	if (tex2.a > 0.0) {
		color.rgb = tex2.rgb + (tex2.rgb * changeColor.rgb - tex2.rgb)*tex2.a;//lerp(tex2.rgb, tex2 * changeColor.rgb, tex2.a)
	}
#else
	color.rgb = mix(color.rgb, tex2.rgb, tex2.a);
#endif
#endif

#ifdef USE_OVERLAY
	//use either the diffuse or the OVERLAY_COLOR
	color.rgb = mix(color, overlayColor, overlayColor.a).rgb;
#endif

#ifdef USE_EMISSIVE
	//make glowy stuff
	color *= mix(vec4(1.0), light, color.a );
#else
	color *= light;
#endif

	float shadow_a =0.0;

if(light.r<=0.95){
shadow_a=0.0;
}
else if(light.r<=1.2){
shadow_a=(light.r-0.95)*30.0;
}
else{
shadow_a=1.0;
}

vec3 scrli = vec3(max(150.0, 300.0 - edge_effect * 120.0))*0.0035;


vec3 worldlight =mix(shadow_color,sunlight_color,min(shadow_a,1.0))*0.8;
if(items_flag!=1.0){
color.rgb*=worldlight;
}
/*
if(light.r>=0.6){

color.rgb =mix(color.rgb,ab.rgb,min((1.0-min(FOG_CONTROL.y,1.0))*(screen_pos.z-0.7),1.0)*0.5);

color +=vec4(abs(min(rain_hl*(screen_pos.z*0.8-0.3),1.0)*0.3-(screen_pos.y-0.3)*0.1*rain_hl)*0.5);
}*/

if((ab.b>=ab.r*2.5&&ab.b*3.0>=ab.g)){
color*=un_water_color*6.0;
color.rgb*=abs(wavs_b)*2.0+0.5;
}


color.rgb*=scrli;


	//apply fog
	color.rgb = mix( color.rgb, fogColor.rgb, fogColor.a );

#ifdef GLINT
	// Applies color mask to glint texture instead and blends with original color
	vec4 layer1 = texture2D(TEXTURE_1, fract(layer1UV)).rgbr * glintColor;
	vec4 layer2 = texture2D(TEXTURE_1, fract(layer2UV)).rgbr * glintColor;
	vec4 glint = (layer1 + layer2) * tileLightColor;

	color = glintBlend(color, glint);
#endif

	//WARNING do not refactor this 
	

	gl_FragColor = color;
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}
