// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.

// To use centroid sampling we need to have version 300 es shaders, which requires changing:
// attribute to in
// varying to out when in vertex shaders or in when in fragment shaders
// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
// texture2D to texture
#if __VERSION__ >= 300

// version 300 code

#define varying in
#define texture2D texture
out vec4 FragColor;
#define gl_FragColor FragColor
#define texture2D texture

#else

// version 100 code

#endif



#ifdef RENDER_SKY

#define RENDERCLOUDS
#define CLOUDLAYERS 6
#define LIGHTLAYERS 5
#define WEATHERLAYER

varying vec4 color;
varying vec4 fogcolor;
varying float fogintense;
varying highp vec3 position;

uniform highp float TIME;

 
highp float rand(highp vec2 p){ 
	return fract(cos(p.x + p.y * 625.61) * 618.552);
} 

highp float noise(highp vec2 p) { 
	highp vec2 i = floor(p); 
	highp vec2 f = fract(p);  
	highp vec2 u = f * f * (3.0 - 2.0 * f); 
	return -1.0 + 2.0 * mix(mix(rand(i + vec2(0.0, 0.0)), 
							rand(i + vec2(1.0, 0.0)), u.x), 
							mix(rand(i + vec2(0.0, 1.0)), 
							rand(i + vec2(1.0, 1.0)), u.x), u.y); 
}

highp mat2 rotationmatrix = mat2(0.9, 0.5, - 0.5, 0.9);
highp float noisemap(highp vec2 p, int depth, highp float d){
	highp float t = TIME * 0.71; // 1.22
 	d = smoothstep(0.0, 100.0, d);
	p *= 0.3 * (d + 0.2);
	highp float z = 2.0;
	highp float rz = 0.0;
	p -= vec2(0.3, 1.0) * t * 0.05;
	for(int i = 0; i < depth; i++){
		rz += noise(p) / z * 1.25;
		z *= 2.1;
		p *= 2.15;
		p += t * 0.027 * pow(z, .5);
		p *= rotationmatrix;
	}
	return pow(abs(rz), 2.0 - d);
}



float highstep(float x, float a, float b){
	float k = 1.0 / (b - a);
	return clamp(x * k + (1.0 - b * k), 0.0, 1.0);
}

float cloudlayer(vec2 pos, int depth){
	return noisemap(pos, depth, 1.0) * 4.0;
}

float weathermap(vec2 pos){
	#ifdef WEATHERLAYER
		return highstep(cloudlayer(pos * .075, 2), 0.0, 1.0);
	#else
		return 0.0;
	#endif
}

vec4 cloudcolor(highp vec2 pos, vec3 ambient, vec3 lightcolor){
	highp vec2 dir = vec2(1.0, 0.5) * 1.82;
	highp float mainlayer = cloudlayer(pos, CLOUDLAYERS);
	highp float normallayer = cloudlayer(pos - dir, LIGHTLAYERS);
	highp float weatherlayer = weathermap(pos);
	highp float weatherfactor = 1.0 + weatherlayer * weatherlayer * 100.0;
	highp float mvalue = mainlayer;
	mainlayer *= weatherfactor;
	normallayer *= weatherfactor;

	if(normallayer < 1.0){
		normallayer -= (1.0 - normallayer) * 2.5;
	}
	if(mainlayer < 1.0){
		mainlayer -= (1.0 - mainlayer) * 2.5;
	}

	float layerdelta = (mainlayer - normallayer) / 1.5 / length(dir) / weatherfactor;
	float layervalue = normallayer / 4.0;

	float light = pow(clamp(layerdelta, 0.0, 1.0), 1.0) * 1.5;
	float dark = 1.0 - pow(clamp(layerdelta + 0.1, 0.0, 1.0), 0.5);

	vec3 basecolor = vec3(0.4);
	vec3 brightcolor = vec3(0.73) * ambient + vec3(.1);
	vec3 bgcolor = brightcolor * (1.0 - dark * mvalue * (weatherlayer + .1) * 0.125);
	vec3 color = mix(bgcolor, bgcolor + lightcolor, min(light, 1.0));

	return vec4(color, min(1.0, pow(mvalue, .9))); //min(1.0, pow(mvalue + 0.1 * weatherlayer, 1.1 - weatherlayer)));
}

vec3 getlightcolor(float brightness){
	float sunset = (brightness - 0.4) / 0.1;
	float sunsetval = 1.0 - pow(min(1.0, abs(sunset)), 1.5);
	vec3 sunsetcolor = vec3(0.77, 0.1, 0.15) * 1.8;
	if(sunset > 0.0){
		return mix(vec3(.35), sunsetcolor, sunsetval);
	}
	else{
		return mix(vec3(0.25, 0.25, 0.38) * 1.8, sunsetcolor, sunsetval);
	}
}


void main()
{
	vec4 _color = color;
	
	#ifdef RENDERCLOUDS
		float brightness = sqrt((max(0.0, color.b - 0.41)) / 0.79);
		vec4 cloud = cloudcolor(position.zx * 141.0 / pow(float(CLOUDLAYERS), .4), vec3(brightness), getlightcolor(color.b) * 0.95);
		_color.rgb = mix(_color.rgb, cloud.rgb, cloud.a);
	#endif
	
	gl_FragColor = mix(_color, fogcolor, fogintense);
}


#else

varying vec4 color;

void main()
{
gl_FragColor = color;
}

#endif
